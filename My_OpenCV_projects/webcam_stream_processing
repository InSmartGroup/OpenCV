# Create a video capture object
video_reader = cv2.VideoCapture(0)

# Specify display window
window_name = 'Edge Detection'
cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)

# Get frame video parameters
frame_width = video_reader.get(cv2.CAP_PROP_FRAME_WIDTH)
frame_height = video_reader.get(cv2.CAP_PROP_FRAME_HEIGHT)
frame_size = (int(frame_width), int(frame_height))

# Create a video writer object
video_writer = cv2.VideoWriter('Edge Detection.mp4', cv2.VideoWriter_fourcc(*'FMP4'), 30, frame_size)

# Vider filtering modes
PREVIEW = 0
EDGE = 1
CONTOUR = 2
mode = PREVIEW
result = None

# Process the webcam stream
while True:
    has_frames, frame = video_reader.read()
    if not has_frames:
        break
    
    # Mirror the frame   
    frame = cv2.flip(frame, 1)
    frame_copy = frame.copy()
    
    # Regular webcam stream mode
    if mode == PREVIEW:
        result = frame
        cv2.putText(result, "Preview Mode", (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
    
    # Edge detection mode
    if mode == EDGE:
        result = cv2.Canny(frame, 80, 150)
        result = cv2.cvtColor(result, cv2.COLOR_GRAY2BGR)
        cv2.putText(result, "Edge Detection Mode", (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)
    
    # Contour detection mode
    if mode == CONTOUR:
        result = frame
        
        # Convert a frame to grayscale
        if len(result.shape) > 2:
            result_gray = cv2.cvtColor(result, cv2.COLOR_BGR2GRAY)
            _, result_thresh = cv2.threshold(result_gray, 60, 255, cv2.THRESH_BINARY)
            
        else:
            _, result_thresh = cv2.threshold(result, 60, 255, cv2.THRESH_BINARY)
            
        contours, hierarchy = cv2.findContours(result_thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
        
        for contour in contours:
            cv2.drawContours(result, contour, -1, (0, 255, 255), 3, lineType=cv2.LINE_AA)    
        cv2.putText(result, "Contour Mode", (10, 40), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)

    # Display the output    
    cv2.imshow(window_name, result)
    
    # Webcam stream keyboard control
    key = cv2.waitKey(1)
    
    # Terminate the program
    if key == 27 or key == ord('q') or key == ord('Q'):
        break
    
    # Switch to edge detection mode
    elif key == ord('E') or key == ord('e'):
        mode = EDGE
    
    # Switch to regular webcam stream
    elif key == ord('S') or key == ord('s'):
        mode = PREVIEW
    
    # Switch to contour detection mode
    elif key == ord('C') or key == ord('c'):
        mode = CONTOUR
    
    # Write the stream to a file
    video_writer.write(result)

# Release the data
cv2.destroyAllWindows()
video_reader.release()
video_writer.release()
